// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/KOB4k/app/ent/disease"
	"github.com/KOB4k/app/ent/diseasetype"
	"github.com/KOB4k/app/ent/employee"
	"github.com/KOB4k/app/ent/predicate"
	"github.com/KOB4k/app/ent/severity"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// DiseaseUpdate is the builder for updating Disease entities.
type DiseaseUpdate struct {
	config
	hooks      []Hook
	mutation   *DiseaseMutation
	predicates []predicate.Disease
}

// Where adds a new predicate for the builder.
func (du *DiseaseUpdate) Where(ps ...predicate.Disease) *DiseaseUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetName sets the Name field.
func (du *DiseaseUpdate) SetName(s string) *DiseaseUpdate {
	du.mutation.SetName(s)
	return du
}

// SetSymptom sets the Symptom field.
func (du *DiseaseUpdate) SetSymptom(s string) *DiseaseUpdate {
	du.mutation.SetSymptom(s)
	return du
}

// SetContagion sets the Contagion field.
func (du *DiseaseUpdate) SetContagion(s string) *DiseaseUpdate {
	du.mutation.SetContagion(s)
	return du
}

// SetEmployeeID sets the employee edge to Employee by id.
func (du *DiseaseUpdate) SetEmployeeID(id int) *DiseaseUpdate {
	du.mutation.SetEmployeeID(id)
	return du
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (du *DiseaseUpdate) SetNillableEmployeeID(id *int) *DiseaseUpdate {
	if id != nil {
		du = du.SetEmployeeID(*id)
	}
	return du
}

// SetEmployee sets the employee edge to Employee.
func (du *DiseaseUpdate) SetEmployee(e *Employee) *DiseaseUpdate {
	return du.SetEmployeeID(e.ID)
}

// SetServerityID sets the serverity edge to Severity by id.
func (du *DiseaseUpdate) SetServerityID(id int) *DiseaseUpdate {
	du.mutation.SetServerityID(id)
	return du
}

// SetNillableServerityID sets the serverity edge to Severity by id if the given value is not nil.
func (du *DiseaseUpdate) SetNillableServerityID(id *int) *DiseaseUpdate {
	if id != nil {
		du = du.SetServerityID(*id)
	}
	return du
}

// SetServerity sets the serverity edge to Severity.
func (du *DiseaseUpdate) SetServerity(s *Severity) *DiseaseUpdate {
	return du.SetServerityID(s.ID)
}

// SetDiseasetypeID sets the diseasetype edge to Diseasetype by id.
func (du *DiseaseUpdate) SetDiseasetypeID(id int) *DiseaseUpdate {
	du.mutation.SetDiseasetypeID(id)
	return du
}

// SetNillableDiseasetypeID sets the diseasetype edge to Diseasetype by id if the given value is not nil.
func (du *DiseaseUpdate) SetNillableDiseasetypeID(id *int) *DiseaseUpdate {
	if id != nil {
		du = du.SetDiseasetypeID(*id)
	}
	return du
}

// SetDiseasetype sets the diseasetype edge to Diseasetype.
func (du *DiseaseUpdate) SetDiseasetype(d *Diseasetype) *DiseaseUpdate {
	return du.SetDiseasetypeID(d.ID)
}

// Mutation returns the DiseaseMutation object of the builder.
func (du *DiseaseUpdate) Mutation() *DiseaseMutation {
	return du.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (du *DiseaseUpdate) ClearEmployee() *DiseaseUpdate {
	du.mutation.ClearEmployee()
	return du
}

// ClearServerity clears the serverity edge to Severity.
func (du *DiseaseUpdate) ClearServerity() *DiseaseUpdate {
	du.mutation.ClearServerity()
	return du
}

// ClearDiseasetype clears the diseasetype edge to Diseasetype.
func (du *DiseaseUpdate) ClearDiseasetype() *DiseaseUpdate {
	du.mutation.ClearDiseasetype()
	return du
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DiseaseUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiseaseUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiseaseUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiseaseUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DiseaseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disease.Table,
			Columns: disease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: disease.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldName,
		})
	}
	if value, ok := du.mutation.Symptom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldSymptom,
		})
	}
	if value, ok := du.mutation.Contagion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldContagion,
		})
	}
	if du.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.EmployeeTable,
			Columns: []string{disease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.EmployeeTable,
			Columns: []string{disease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.ServerityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.ServerityTable,
			Columns: []string{disease.ServerityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.ServerityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.ServerityTable,
			Columns: []string{disease.ServerityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DiseasetypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.DiseasetypeTable,
			Columns: []string{disease.DiseasetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diseasetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DiseasetypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.DiseasetypeTable,
			Columns: []string{disease.DiseasetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diseasetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DiseaseUpdateOne is the builder for updating a single Disease entity.
type DiseaseUpdateOne struct {
	config
	hooks    []Hook
	mutation *DiseaseMutation
}

// SetName sets the Name field.
func (duo *DiseaseUpdateOne) SetName(s string) *DiseaseUpdateOne {
	duo.mutation.SetName(s)
	return duo
}

// SetSymptom sets the Symptom field.
func (duo *DiseaseUpdateOne) SetSymptom(s string) *DiseaseUpdateOne {
	duo.mutation.SetSymptom(s)
	return duo
}

// SetContagion sets the Contagion field.
func (duo *DiseaseUpdateOne) SetContagion(s string) *DiseaseUpdateOne {
	duo.mutation.SetContagion(s)
	return duo
}

// SetEmployeeID sets the employee edge to Employee by id.
func (duo *DiseaseUpdateOne) SetEmployeeID(id int) *DiseaseUpdateOne {
	duo.mutation.SetEmployeeID(id)
	return duo
}

// SetNillableEmployeeID sets the employee edge to Employee by id if the given value is not nil.
func (duo *DiseaseUpdateOne) SetNillableEmployeeID(id *int) *DiseaseUpdateOne {
	if id != nil {
		duo = duo.SetEmployeeID(*id)
	}
	return duo
}

// SetEmployee sets the employee edge to Employee.
func (duo *DiseaseUpdateOne) SetEmployee(e *Employee) *DiseaseUpdateOne {
	return duo.SetEmployeeID(e.ID)
}

// SetServerityID sets the serverity edge to Severity by id.
func (duo *DiseaseUpdateOne) SetServerityID(id int) *DiseaseUpdateOne {
	duo.mutation.SetServerityID(id)
	return duo
}

// SetNillableServerityID sets the serverity edge to Severity by id if the given value is not nil.
func (duo *DiseaseUpdateOne) SetNillableServerityID(id *int) *DiseaseUpdateOne {
	if id != nil {
		duo = duo.SetServerityID(*id)
	}
	return duo
}

// SetServerity sets the serverity edge to Severity.
func (duo *DiseaseUpdateOne) SetServerity(s *Severity) *DiseaseUpdateOne {
	return duo.SetServerityID(s.ID)
}

// SetDiseasetypeID sets the diseasetype edge to Diseasetype by id.
func (duo *DiseaseUpdateOne) SetDiseasetypeID(id int) *DiseaseUpdateOne {
	duo.mutation.SetDiseasetypeID(id)
	return duo
}

// SetNillableDiseasetypeID sets the diseasetype edge to Diseasetype by id if the given value is not nil.
func (duo *DiseaseUpdateOne) SetNillableDiseasetypeID(id *int) *DiseaseUpdateOne {
	if id != nil {
		duo = duo.SetDiseasetypeID(*id)
	}
	return duo
}

// SetDiseasetype sets the diseasetype edge to Diseasetype.
func (duo *DiseaseUpdateOne) SetDiseasetype(d *Diseasetype) *DiseaseUpdateOne {
	return duo.SetDiseasetypeID(d.ID)
}

// Mutation returns the DiseaseMutation object of the builder.
func (duo *DiseaseUpdateOne) Mutation() *DiseaseMutation {
	return duo.mutation
}

// ClearEmployee clears the employee edge to Employee.
func (duo *DiseaseUpdateOne) ClearEmployee() *DiseaseUpdateOne {
	duo.mutation.ClearEmployee()
	return duo
}

// ClearServerity clears the serverity edge to Severity.
func (duo *DiseaseUpdateOne) ClearServerity() *DiseaseUpdateOne {
	duo.mutation.ClearServerity()
	return duo
}

// ClearDiseasetype clears the diseasetype edge to Diseasetype.
func (duo *DiseaseUpdateOne) ClearDiseasetype() *DiseaseUpdateOne {
	duo.mutation.ClearDiseasetype()
	return duo
}

// Save executes the query and returns the updated entity.
func (duo *DiseaseUpdateOne) Save(ctx context.Context) (*Disease, error) {

	var (
		err  error
		node *Disease
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiseaseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiseaseUpdateOne) SaveX(ctx context.Context) *Disease {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DiseaseUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiseaseUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DiseaseUpdateOne) sqlSave(ctx context.Context) (d *Disease, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   disease.Table,
			Columns: disease.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: disease.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Disease.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldName,
		})
	}
	if value, ok := duo.mutation.Symptom(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldSymptom,
		})
	}
	if value, ok := duo.mutation.Contagion(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: disease.FieldContagion,
		})
	}
	if duo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.EmployeeTable,
			Columns: []string{disease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.EmployeeTable,
			Columns: []string{disease.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: employee.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.ServerityCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.ServerityTable,
			Columns: []string{disease.ServerityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.ServerityIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.ServerityTable,
			Columns: []string{disease.ServerityColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: severity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DiseasetypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.DiseasetypeTable,
			Columns: []string{disease.DiseasetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diseasetype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DiseasetypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   disease.DiseasetypeTable,
			Columns: []string{disease.DiseasetypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: diseasetype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &Disease{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{disease.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
