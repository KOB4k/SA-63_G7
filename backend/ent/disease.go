// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/KOB4k/app/ent/disease"
	"github.com/KOB4k/app/ent/diseasetype"
	"github.com/KOB4k/app/ent/employee"
	"github.com/KOB4k/app/ent/severity"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Disease is the model entity for the Disease schema.
type Disease struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Symptom holds the value of the "Symptom" field.
	Symptom string `json:"Symptom,omitempty"`
	// Contagion holds the value of the "Contagion" field.
	Contagion string `json:"Contagion,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DiseaseQuery when eager-loading is set.
	Edges               DiseaseEdges `json:"edges"`
	diseasetype_disease *int
	employee_disease    *int
	severity_disease    *int
}

// DiseaseEdges holds the relations/edges for other nodes in the graph.
type DiseaseEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee
	// Severity holds the value of the severity edge.
	Severity *Severity
	// Diseasetype holds the value of the diseasetype edge.
	Diseasetype *Diseasetype
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiseaseEdges) EmployeeOrErr() (*Employee, error) {
	if e.loadedTypes[0] {
		if e.Employee == nil {
			// The edge employee was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: employee.Label}
		}
		return e.Employee, nil
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// SeverityOrErr returns the Severity value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiseaseEdges) SeverityOrErr() (*Severity, error) {
	if e.loadedTypes[1] {
		if e.Severity == nil {
			// The edge severity was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: severity.Label}
		}
		return e.Severity, nil
	}
	return nil, &NotLoadedError{edge: "severity"}
}

// DiseasetypeOrErr returns the Diseasetype value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DiseaseEdges) DiseasetypeOrErr() (*Diseasetype, error) {
	if e.loadedTypes[2] {
		if e.Diseasetype == nil {
			// The edge diseasetype was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: diseasetype.Label}
		}
		return e.Diseasetype, nil
	}
	return nil, &NotLoadedError{edge: "diseasetype"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Disease) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Name
		&sql.NullString{}, // Symptom
		&sql.NullString{}, // Contagion
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Disease) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // diseasetype_disease
		&sql.NullInt64{}, // employee_disease
		&sql.NullInt64{}, // severity_disease
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Disease fields.
func (d *Disease) assignValues(values ...interface{}) error {
	if m, n := len(values), len(disease.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Name", values[0])
	} else if value.Valid {
		d.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Symptom", values[1])
	} else if value.Valid {
		d.Symptom = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Contagion", values[2])
	} else if value.Valid {
		d.Contagion = value.String
	}
	values = values[3:]
	if len(values) == len(disease.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field diseasetype_disease", value)
		} else if value.Valid {
			d.diseasetype_disease = new(int)
			*d.diseasetype_disease = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field employee_disease", value)
		} else if value.Valid {
			d.employee_disease = new(int)
			*d.employee_disease = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field severity_disease", value)
		} else if value.Valid {
			d.severity_disease = new(int)
			*d.severity_disease = int(value.Int64)
		}
	}
	return nil
}

// QueryEmployee queries the employee edge of the Disease.
func (d *Disease) QueryEmployee() *EmployeeQuery {
	return (&DiseaseClient{config: d.config}).QueryEmployee(d)
}

// QuerySeverity queries the severity edge of the Disease.
func (d *Disease) QuerySeverity() *SeverityQuery {
	return (&DiseaseClient{config: d.config}).QuerySeverity(d)
}

// QueryDiseasetype queries the diseasetype edge of the Disease.
func (d *Disease) QueryDiseasetype() *DiseasetypeQuery {
	return (&DiseaseClient{config: d.config}).QueryDiseasetype(d)
}

// Update returns a builder for updating this Disease.
// Note that, you need to call Disease.Unwrap() before calling this method, if this Disease
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Disease) Update() *DiseaseUpdateOne {
	return (&DiseaseClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *Disease) Unwrap() *Disease {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Disease is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Disease) String() string {
	var builder strings.Builder
	builder.WriteString("Disease(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", Name=")
	builder.WriteString(d.Name)
	builder.WriteString(", Symptom=")
	builder.WriteString(d.Symptom)
	builder.WriteString(", Contagion=")
	builder.WriteString(d.Contagion)
	builder.WriteByte(')')
	return builder.String()
}

// Diseases is a parsable slice of Disease.
type Diseases []*Disease

func (d Diseases) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
