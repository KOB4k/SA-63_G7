// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/KOB4k/app/ent/disease"
	"github.com/KOB4k/app/ent/diseasetype"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// DiseaseTypeCreate is the builder for creating a DiseaseType entity.
type DiseaseTypeCreate struct {
	config
	mutation *DiseaseTypeMutation
	hooks    []Hook
}

// SetName sets the name field.
func (dtc *DiseaseTypeCreate) SetName(s string) *DiseaseTypeCreate {
	dtc.mutation.SetName(s)
	return dtc
}

// AddDiseaseIDs adds the disease edge to Disease by ids.
func (dtc *DiseaseTypeCreate) AddDiseaseIDs(ids ...int) *DiseaseTypeCreate {
	dtc.mutation.AddDiseaseIDs(ids...)
	return dtc
}

// AddDisease adds the disease edges to Disease.
func (dtc *DiseaseTypeCreate) AddDisease(d ...*Disease) *DiseaseTypeCreate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return dtc.AddDiseaseIDs(ids...)
}

// Mutation returns the DiseaseTypeMutation object of the builder.
func (dtc *DiseaseTypeCreate) Mutation() *DiseaseTypeMutation {
	return dtc.mutation
}

// Save creates the DiseaseType in the database.
func (dtc *DiseaseTypeCreate) Save(ctx context.Context) (*DiseaseType, error) {
	if _, ok := dtc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := dtc.mutation.Name(); ok {
		if err := diseasetype.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	var (
		err  error
		node *DiseaseType
	)
	if len(dtc.hooks) == 0 {
		node, err = dtc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DiseaseTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dtc.mutation = mutation
			node, err = dtc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dtc.hooks) - 1; i >= 0; i-- {
			mut = dtc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dtc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DiseaseTypeCreate) SaveX(ctx context.Context) *DiseaseType {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dtc *DiseaseTypeCreate) sqlSave(ctx context.Context) (*DiseaseType, error) {
	dt, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	dt.ID = int(id)
	return dt, nil
}

func (dtc *DiseaseTypeCreate) createSpec() (*DiseaseType, *sqlgraph.CreateSpec) {
	var (
		dt    = &DiseaseType{config: dtc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: diseasetype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: diseasetype.FieldID,
			},
		}
	)
	if value, ok := dtc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: diseasetype.FieldName,
		})
		dt.Name = value
	}
	if nodes := dtc.mutation.DiseaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   diseasetype.DiseaseTable,
			Columns: []string{diseasetype.DiseaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: disease.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return dt, _spec
}
