/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EntDisease,
    EntDiseaseFromJSON,
    EntDiseaseToJSON,
    EntDiseasetype,
    EntDiseasetypeFromJSON,
    EntDiseasetypeToJSON,
    EntEmployee,
    EntEmployeeFromJSON,
    EntEmployeeToJSON,
    EntSeverity,
    EntSeverityFromJSON,
    EntSeverityToJSON,
} from '../models';

export interface CreateDiseaseRequest {
    disease: EntDisease;
}

export interface CreateDiseasetypeRequest {
    diseasetype: EntDiseasetype;
}

export interface CreateEmployeeRequest {
    employee: EntEmployee;
}

export interface CreateSeverityRequest {
    severity: EntSeverity;
}

export interface DeleteDiseaseRequest {
    id: number;
}

export interface DeleteDiseasetypeRequest {
    id: number;
}

export interface DeleteEmployeeRequest {
    id: number;
}

export interface DeleteSeverityRequest {
    id: number;
}

export interface GetDiseasetypeRequest {
    id: number;
}

export interface GetEmployeeRequest {
    id: number;
}

export interface GetSeverityRequest {
    id: number;
}

export interface ListDiseaseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDiseasetypeRequest {
    limit?: number;
    offset?: number;
}

export interface ListEmployeeRequest {
    limit?: number;
    offset?: number;
}

export interface ListSeverityRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateDiseaseRequest {
    id: number;
    disease: EntDisease;
}

export interface UpdateDiseasetypeRequest {
    id: number;
    diseasetype: EntDiseasetype;
}

export interface UpdateEmployeeRequest {
    id: number;
    employee: EntEmployee;
}

export interface UpdateSeverityRequest {
    id: number;
    severity: EntSeverity;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create disease
     * Create disease
     */
    async createDiseaseRaw(requestParameters: CreateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling createDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * Create disease
     * Create disease
     */
    async createDisease(requestParameters: CreateDiseaseRequest): Promise<EntDisease> {
        const response = await this.createDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create diseasetype
     * Create diseasetype
     */
    async createDiseasetypeRaw(requestParameters: CreateDiseasetypeRequest): Promise<runtime.ApiResponse<EntDiseasetype>> {
        if (requestParameters.diseasetype === null || requestParameters.diseasetype === undefined) {
            throw new runtime.RequiredError('diseasetype','Required parameter requestParameters.diseasetype was null or undefined when calling createDiseasetype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseasetypes`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseasetypeToJSON(requestParameters.diseasetype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseasetypeFromJSON(jsonValue));
    }

    /**
     * Create diseasetype
     * Create diseasetype
     */
    async createDiseasetype(requestParameters: CreateDiseasetypeRequest): Promise<EntDiseasetype> {
        const response = await this.createDiseasetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployeeRaw(requestParameters: CreateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling createEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/Employees`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * Create employee
     * Create employee
     */
    async createEmployee(requestParameters: CreateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.createEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create severity
     * Create severity
     */
    async createSeverityRaw(requestParameters: CreateSeverityRequest): Promise<runtime.ApiResponse<EntSeverity>> {
        if (requestParameters.severity === null || requestParameters.severity === undefined) {
            throw new runtime.RequiredError('severity','Required parameter requestParameters.severity was null or undefined when calling createSeverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/severitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EntSeverityToJSON(requestParameters.severity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSeverityFromJSON(jsonValue));
    }

    /**
     * Create severity
     * Create severity
     */
    async createSeverity(requestParameters: CreateSeverityRequest): Promise<EntSeverity> {
        const response = await this.createSeverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDiseaseRaw(requestParameters: DeleteDiseaseRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get disease by ID
     * Delete a disease entity by ID
     */
    async deleteDisease(requestParameters: DeleteDiseaseRequest): Promise<object> {
        const response = await this.deleteDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get diseasetype by ID
     * Delete a diseasetype entity by ID
     */
    async deleteDiseasetypeRaw(requestParameters: DeleteDiseasetypeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteDiseasetype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseasetypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get diseasetype by ID
     * Delete a diseasetype entity by ID
     */
    async deleteDiseasetype(requestParameters: DeleteDiseasetypeRequest): Promise<object> {
        const response = await this.deleteDiseasetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployeeRaw(requestParameters: DeleteEmployeeRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get employee by ID
     * Delete a employee entity by ID
     */
    async deleteEmployee(requestParameters: DeleteEmployeeRequest): Promise<object> {
        const response = await this.deleteEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get severity by ID
     * Delete a severity entity by ID
     */
    async deleteSeverityRaw(requestParameters: DeleteSeverityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteSeverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/severitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get severity by ID
     * Delete a severity entity by ID
     */
    async deleteSeverity(requestParameters: DeleteSeverityRequest): Promise<object> {
        const response = await this.deleteSeverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get diseasetype by ID
     * Get a diseasetype entity by ID
     */
    async getDiseasetypeRaw(requestParameters: GetDiseasetypeRequest): Promise<runtime.ApiResponse<EntDiseasetype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDiseasetype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseasetypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseasetypeFromJSON(jsonValue));
    }

    /**
     * get diseasetype by ID
     * Get a diseasetype entity by ID
     */
    async getDiseasetype(requestParameters: GetDiseasetypeRequest): Promise<EntDiseasetype> {
        const response = await this.getDiseasetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployeeRaw(requestParameters: GetEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * get employee by ID
     * Get a employee entity by ID
     */
    async getEmployee(requestParameters: GetEmployeeRequest): Promise<EntEmployee> {
        const response = await this.getEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get severity by ID
     * Get a severity entity by ID
     */
    async getSeverityRaw(requestParameters: GetSeverityRequest): Promise<runtime.ApiResponse<EntSeverity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSeverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/severitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSeverityFromJSON(jsonValue));
    }

    /**
     * get severity by ID
     * Get a severity entity by ID
     */
    async getSeverity(requestParameters: GetSeverityRequest): Promise<EntSeverity> {
        const response = await this.getSeverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDiseaseRaw(requestParameters: ListDiseaseRequest): Promise<runtime.ApiResponse<Array<EntDisease>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseases`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiseaseFromJSON));
    }

    /**
     * list disease entities
     * List disease entities
     */
    async listDisease(requestParameters: ListDiseaseRequest): Promise<Array<EntDisease>> {
        const response = await this.listDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list diseasetype entities
     * List diseasetype entities
     */
    async listDiseasetypeRaw(requestParameters: ListDiseasetypeRequest): Promise<runtime.ApiResponse<Array<EntDiseasetype>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/diseasetypes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDiseasetypeFromJSON));
    }

    /**
     * list diseasetype entities
     * List diseasetype entities
     */
    async listDiseasetype(requestParameters: ListDiseasetypeRequest): Promise<Array<EntDiseasetype>> {
        const response = await this.listDiseasetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployeeRaw(requestParameters: ListEmployeeRequest): Promise<runtime.ApiResponse<Array<EntEmployee>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/employees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntEmployeeFromJSON));
    }

    /**
     * list employee entities
     * List employee entities
     */
    async listEmployee(requestParameters: ListEmployeeRequest): Promise<Array<EntEmployee>> {
        const response = await this.listEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list severity entities
     * List severity entities
     */
    async listSeverityRaw(requestParameters: ListSeverityRequest): Promise<runtime.ApiResponse<Array<EntSeverity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/severitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSeverityFromJSON));
    }

    /**
     * list severity entities
     * List severity entities
     */
    async listSeverity(requestParameters: ListSeverityRequest): Promise<Array<EntSeverity>> {
        const response = await this.listSeverityRaw(requestParameters);
        return await response.value();
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDiseaseRaw(requestParameters: UpdateDiseaseRequest): Promise<runtime.ApiResponse<EntDisease>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDisease.');
        }

        if (requestParameters.disease === null || requestParameters.disease === undefined) {
            throw new runtime.RequiredError('disease','Required parameter requestParameters.disease was null or undefined when calling updateDisease.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseases/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseaseToJSON(requestParameters.disease),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseaseFromJSON(jsonValue));
    }

    /**
     * update disease by ID
     * Update a disease entity by ID
     */
    async updateDisease(requestParameters: UpdateDiseaseRequest): Promise<EntDisease> {
        const response = await this.updateDiseaseRaw(requestParameters);
        return await response.value();
    }

    /**
     * update diseasetype by ID
     * Update a diseasetype entity by ID
     */
    async updateDiseasetypeRaw(requestParameters: UpdateDiseasetypeRequest): Promise<runtime.ApiResponse<EntDiseasetype>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateDiseasetype.');
        }

        if (requestParameters.diseasetype === null || requestParameters.diseasetype === undefined) {
            throw new runtime.RequiredError('diseasetype','Required parameter requestParameters.diseasetype was null or undefined when calling updateDiseasetype.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/diseasetypes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntDiseasetypeToJSON(requestParameters.diseasetype),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDiseasetypeFromJSON(jsonValue));
    }

    /**
     * update diseasetype by ID
     * Update a diseasetype entity by ID
     */
    async updateDiseasetype(requestParameters: UpdateDiseasetypeRequest): Promise<EntDiseasetype> {
        const response = await this.updateDiseasetypeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update employee by ID
     * Update a employee entity by ID
     */
    async updateEmployeeRaw(requestParameters: UpdateEmployeeRequest): Promise<runtime.ApiResponse<EntEmployee>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateEmployee.');
        }

        if (requestParameters.employee === null || requestParameters.employee === undefined) {
            throw new runtime.RequiredError('employee','Required parameter requestParameters.employee was null or undefined when calling updateEmployee.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/employees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntEmployeeToJSON(requestParameters.employee),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntEmployeeFromJSON(jsonValue));
    }

    /**
     * update employee by ID
     * Update a employee entity by ID
     */
    async updateEmployee(requestParameters: UpdateEmployeeRequest): Promise<EntEmployee> {
        const response = await this.updateEmployeeRaw(requestParameters);
        return await response.value();
    }

    /**
     * update severity by ID
     * Update a severity entity by ID
     */
    async updateSeverityRaw(requestParameters: UpdateSeverityRequest): Promise<runtime.ApiResponse<EntSeverity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateSeverity.');
        }

        if (requestParameters.severity === null || requestParameters.severity === undefined) {
            throw new runtime.RequiredError('severity','Required parameter requestParameters.severity was null or undefined when calling updateSeverity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/severitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntSeverityToJSON(requestParameters.severity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSeverityFromJSON(jsonValue));
    }

    /**
     * update severity by ID
     * Update a severity entity by ID
     */
    async updateSeverity(requestParameters: UpdateSeverityRequest): Promise<EntSeverity> {
        const response = await this.updateSeverityRaw(requestParameters);
        return await response.value();
    }

}
